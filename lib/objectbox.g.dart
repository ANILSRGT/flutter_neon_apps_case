// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'app/domain/models/constituent_model.dart';
import 'app/domain/models/department_model.dart';
import 'app/domain/models/measurement_model.dart';
import 'app/domain/models/met_object_model.dart';
import 'app/domain/models/met_objects_model.dart';
import 'app/domain/models/met_search_model.dart';
import 'app/domain/models/tag_model.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
    id: const obx_int.IdUid(1, 3400714561225318792),
    name: 'ConstituentModel',
    lastPropertyId: const obx_int.IdUid(8, 6576370707695377006),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 8237019104780005696),
        name: 'constituentID',
        type: 6,
        flags: 40,
        indexId: const obx_int.IdUid(5, 4208626785797510295),
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 5956796505865141312),
        name: 'role',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 7278609737335619156),
        name: 'name',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 8039553281109507225),
        name: 'constituentULAN_URL',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 5356279481757997731),
        name: 'constituentWikidata_URL',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 6742092208559707318),
        name: 'gender',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(8, 6576370707695377006),
        name: 'localId',
        type: 6,
        flags: 129,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(2, 2017232906959307735),
    name: 'DepartmentModel',
    lastPropertyId: const obx_int.IdUid(4, 5665734834016502757),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 701757342209485310),
        name: 'departmentId',
        type: 6,
        flags: 40,
        indexId: const obx_int.IdUid(6, 7885848392561476576),
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 6606663235365601968),
        name: 'displayName',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 5665734834016502757),
        name: 'localId',
        type: 6,
        flags: 129,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(3, 19295087172538908),
    name: 'MetObjectModel',
    lastPropertyId: const obx_int.IdUid(297, 4221274827747606942),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(179, 8143825694358872781),
        name: 'localId',
        type: 6,
        flags: 129,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(244, 3669959230741322366),
        name: 'objectID',
        type: 6,
        flags: 40,
        indexId: const obx_int.IdUid(8, 3968616510953563754),
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(245, 2581103674293951746),
        name: 'isHighlight',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(246, 1468767442769983890),
        name: 'accessionNumber',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(247, 6004408594691592781),
        name: 'accessionYear',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(248, 3623959020674523926),
        name: 'isPublicDomain',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(249, 6129894466639680429),
        name: 'primaryImage',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(250, 4452046377392465969),
        name: 'primaryImageSmall',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(251, 8723404546266692402),
        name: 'department',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(252, 835208642991816231),
        name: 'objectName',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(253, 3567940274101080627),
        name: 'title',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(254, 424572161781992430),
        name: 'culture',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(255, 2811428936133255913),
        name: 'period',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(256, 2543421154281782124),
        name: 'dynasty',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(257, 7461693185013417763),
        name: 'reign',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(258, 2811467690915219716),
        name: 'portfolio',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(259, 2557990095189409250),
        name: 'artistRole',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(260, 5976724540124746209),
        name: 'artistPrefix',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(261, 1276887676822507415),
        name: 'artistDisplayName',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(262, 3934982346933555205),
        name: 'artistDisplayBio',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(263, 509185357804008363),
        name: 'artistSuffix',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(264, 3804771098561921125),
        name: 'artistAlphaSort',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(265, 7904521579917464825),
        name: 'artistNationality',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(266, 6664491962901478327),
        name: 'artistBeginDate',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(267, 3651591473436942804),
        name: 'artistEndDate',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(268, 4836502655855945010),
        name: 'artistGender',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(269, 3751842176923320722),
        name: 'artistWikidata_URL',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(270, 7985389915358311050),
        name: 'artistULAN_URL',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(271, 2724017308646325844),
        name: 'objectDate',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(272, 1945297751797442714),
        name: 'objectBeginDate',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(273, 4925507053339688080),
        name: 'objectEndDate',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(274, 2128393159857785926),
        name: 'medium',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(275, 8670736938481364206),
        name: 'dimensions',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(276, 7772494884949776155),
        name: 'creditLine',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(277, 6012782511516505455),
        name: 'geographyType',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(278, 637456957393361742),
        name: 'city',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(279, 6357763067343093859),
        name: 'state',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(280, 2369781193478688168),
        name: 'county',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(281, 7542344173934677873),
        name: 'country',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(282, 4245823763657121742),
        name: 'region',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(283, 7338908814418353740),
        name: 'subregion',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(284, 3087669836264785433),
        name: 'locale',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(285, 3166999077301800170),
        name: 'locus',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(286, 8297821168797480816),
        name: 'excavation',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(287, 3825146803074026692),
        name: 'river',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(288, 8774969259000753128),
        name: 'classification',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(289, 2255187320687264504),
        name: 'rightsAndReproduction',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(290, 7438391432195864656),
        name: 'linkResource',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(291, 697670391495592935),
        name: 'metadataDate',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(292, 3436643068714628566),
        name: 'repository',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(293, 1022651718292418266),
        name: 'objectURL',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(294, 4395115355504964600),
        name: 'objectWikidata_URL',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(295, 7078997990613512048),
        name: 'isTimelineWork',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(296, 8096402477087644229),
        name: 'GalleryNumber',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(297, 4221274827747606942),
        name: 'additionalImages',
        type: 30,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(4, 6944301132044813922),
    name: 'MetObjectsModel',
    lastPropertyId: const obx_int.IdUid(3, 3472402247435446785),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 8118930839328507605),
        name: 'localId',
        type: 6,
        flags: 129,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 2476488723680415028),
        name: 'total',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 3472402247435446785),
        name: 'objectIDs',
        type: 27,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(5, 7580681416297406572),
    name: 'MetSearchModel',
    lastPropertyId: const obx_int.IdUid(3, 812520298563810270),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 8793896173728037508),
        name: 'localId',
        type: 6,
        flags: 129,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 6130821190851805672),
        name: 'total',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 812520298563810270),
        name: 'objectIDs',
        type: 27,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(6, 459039736759376053),
    name: 'TagModel',
    lastPropertyId: const obx_int.IdUid(4, 5620579902502729408),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 4125473571380684443),
        name: 'localId',
        type: 6,
        flags: 129,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 5008789740849911007),
        name: 'term',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 5432938675064905967),
        name: 'AAT_URL',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 5620579902502729408),
        name: 'Wikidata_URL',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore({
  String? directory,
  int? maxDBSizeInKB,
  int? maxDataSizeInKB,
  int? fileMode,
  int? maxReaders,
  bool queriesCaseSensitiveDefault = true,
  String? macosApplicationGroup,
}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(
    getObjectBoxModel(),
    directory: directory ?? (await defaultStoreDirectory()).path,
    maxDBSizeInKB: maxDBSizeInKB,
    maxDataSizeInKB: maxDataSizeInKB,
    fileMode: fileMode,
    maxReaders: maxReaders,
    queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
    macosApplicationGroup: macosApplicationGroup,
  );
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
    entities: _entities,
    lastEntityId: const obx_int.IdUid(6, 459039736759376053),
    lastIndexId: const obx_int.IdUid(8, 3968616510953563754),
    lastRelationId: const obx_int.IdUid(0, 0),
    lastSequenceId: const obx_int.IdUid(0, 0),
    retiredEntityUids: const [],
    retiredIndexUids: const [
      3179128287111313662,
      1373779809912196333,
      8991154616135570840,
      7455657365288966399,
      7191679394682299476,
    ],
    retiredPropertyUids: const [
      6923034305603945876,
      6838816279598050857,
      4006036810968550409,
      8239150226732372093,
      4095372112770032433,
      8850949076857509868,
      1246064221375210085,
      8213906074285237094,
      6859476580885186205,
      2863433460750639516,
      6433358298605640735,
      4293914097721769077,
      3256089201836234279,
      637964750654815158,
      1899876831774155794,
      4811149886337009590,
      6740526318252105467,
      8044872882981247106,
      6476533786178793329,
      4009007414335140044,
      6392013296145334445,
      2884723141305536276,
      5319770070037076244,
      4019410566082311519,
      4335234831674141135,
      5647166127784092549,
      1187120522440611822,
      8148573156435617529,
      4357208173911038043,
      6978906066991072685,
      3530031925565100705,
      5832238431538768849,
      1310119803142339162,
      5146826989315782371,
      4150914306655671306,
      2939317850475430262,
      8599000166281998703,
      5586774522521688518,
      580341848290219887,
      1462948432387207943,
      2607318294896336595,
      5875479300022449377,
      8506085945349974153,
      932744581821698503,
      2773964459891023578,
      1075038469112752830,
      3991533356564768474,
      402580704301922287,
      6216360871538881033,
      5805209746523616137,
      3015286402635989773,
      3800532520952911700,
      4285008714072584125,
      6177549352100240724,
      2174491260470893428,
      874218396473967476,
      1329041339845301288,
      142233467445303399,
      5701104902068035473,
      5705338264628325241,
      2055583345756680441,
      5970343911804410598,
      2971344905649397832,
      3329355107073682287,
      858975680881863978,
      8541190894936816049,
      9110363757278232982,
      5851659473095231546,
      6430934434036457474,
      1988759857586988169,
      8802351281907825499,
      386906730043017036,
      4664307892839703491,
      2627443511318632364,
      7205672373391468297,
      5589435607983473869,
      1777332624230528946,
      5880466312267723525,
      8657387277329761061,
      4940499597459883232,
      1721722799324763948,
      1263922736584133785,
      3074854172025229228,
      6256859460954340052,
      8725606413744877210,
      1702620860852687448,
      1896537870628275105,
      5970977765816912246,
      1881695149230342906,
      5372820122287728966,
      6464849878131993034,
      7504698419999315768,
      6686511043992563932,
      3582773934229993568,
      4846142126185385902,
      27088740692233249,
      8409760736690732150,
      8707279493799737401,
      2997909585851127539,
      5410043363606660430,
      6856577320558245732,
      8253314045582801120,
      4627481768133194482,
      4541249801648497112,
      6988496102027750534,
      6790042857028305385,
      7971372657946647379,
      7045777392793683759,
      658151281847682651,
      6668544951478729207,
      8114876018665828005,
      51460141269742727,
      6345155567441432929,
      2312809492585818058,
      5621195354909372036,
      353956621194940650,
      8470100123333483005,
      2751050998725273091,
      5826698178748806810,
      2718031205905015139,
      8569725401443730600,
      1456999552408870740,
      2225642378867175547,
      8702527031078535047,
      3689952145552453247,
      7036030377618247124,
      834252587982814226,
      2439947511749652385,
      2975110003574622996,
      6211585800459584250,
      8849254708740573712,
      4191660503376302052,
      9146478505351885926,
      8570563591606004488,
      9018195557998286115,
      6805322330084954433,
      7659788032903681484,
      942910769726502618,
      8209277055610077877,
      3338950858568728545,
      296978583070554314,
      4379983750158714650,
      4182826180310415928,
      8791004207775330019,
      3759112004393140680,
      6432314215967635681,
      5431576004571302138,
      2587521726002899901,
      4612178310343502628,
      8727252511708120459,
      8973327671848384310,
      5586932588834516901,
      7416769384988024235,
      4776301503734519035,
      6348881164748849882,
      10946160190341586,
      939046652930391186,
      8100320838774928972,
      8226942294784511717,
      2609558261944926366,
      2498870642435025722,
      9064181372700595275,
      6146669647067359196,
      6176083767570227639,
      4946210426560106599,
      6672353646246810521,
      1742116127794358564,
      3966088477317862283,
      3516658329603778121,
      1346068248890642177,
      666337259034946619,
      1820044652841576387,
      62408576773316853,
      1417044406831100533,
      4037523089885090783,
      5674830979251235449,
      3382063745877917547,
      9066497146415314597,
      9205592509481662453,
      8210976622643985020,
      1507713293625570804,
      6575115578160570677,
      238551272119875809,
      683346025277616489,
      8820289431045660370,
      4455525938894692831,
      2466007284630509847,
      1205520416091851694,
      1930714744989050314,
      3700877741556482487,
      2767075549290563360,
      2210608752124809213,
      4516028292863247507,
      6734533927006539122,
      4268367972788533548,
      7258272388235328095,
      5764532686407479534,
      2508441025606406708,
      8070352351325560753,
      7330013010024833828,
      2011576262478798391,
      5524075686038240448,
      2451702134520331086,
      3377529743267996022,
      2499865775811895306,
      2535152324671449513,
      7824850351129475873,
      3967049847527954641,
      6170335823566957264,
      2063053914380690757,
      8639189753235706959,
      8975217028668654294,
      3795933289841120482,
      3523624820643921137,
      7255126179678491655,
      9085361845102705803,
      5250430132165974515,
      6199347401397081877,
      1168250094022038721,
      7509546397977320799,
      5574630508356161659,
      7977134711350334714,
      2065767958530834218,
      118908321831413191,
      4718809872727410984,
      4093994904547714483,
      2645756960759454310,
      4435977891934081246,
      1854241438667736718,
      3366673241968735382,
      6639091163947820799,
      2759727782791467021,
      3437895669406812003,
      7420690394620092629,
      2323547582859667897,
      8808923813996570848,
      5343728858191050068,
      1816625416817231574,
      4995391058067870831,
      2515906011268345785,
      5606347093869340786,
      1332440866189299551,
      5061110076143315869,
      755192465652017316,
    ],
    retiredRelationUids: const [],
    modelVersion: 5,
    modelVersionParserMinimum: 5,
    version: 1,
  );

  final bindings = <Type, obx_int.EntityDefinition>{
    ConstituentModel: obx_int.EntityDefinition<ConstituentModel>(
      model: _entities[0],
      toOneRelations: (ConstituentModel object) => [],
      toManyRelations: (ConstituentModel object) => {},
      getId: (ConstituentModel object) => object.localId,
      setId: (ConstituentModel object, int id) {
        if (object.localId != id) {
          throw ArgumentError(
            'Field ConstituentModel.localId is read-only '
            '(final or getter-only) and it was declared to be self-assigned. '
            'However, the currently inserted object (.localId=${object.localId}) '
            "doesn't match the inserted ID (ID $id). "
            'You must assign an ID before calling [box.put()].',
          );
        }
      },
      objectToFB: (ConstituentModel object, fb.Builder fbb) {
        final roleOffset =
            object.role == null ? null : fbb.writeString(object.role!);
        final nameOffset =
            object.name == null ? null : fbb.writeString(object.name!);
        final constituentULAN_URLOffset =
            object.constituentULAN_URL == null
                ? null
                : fbb.writeString(object.constituentULAN_URL!);
        final constituentWikidata_URLOffset =
            object.constituentWikidata_URL == null
                ? null
                : fbb.writeString(object.constituentWikidata_URL!);
        final genderOffset =
            object.gender == null ? null : fbb.writeString(object.gender!);
        fbb.startTable(9);
        fbb.addInt64(1, object.constituentID);
        fbb.addOffset(2, roleOffset);
        fbb.addOffset(3, nameOffset);
        fbb.addOffset(4, constituentULAN_URLOffset);
        fbb.addOffset(5, constituentWikidata_URLOffset);
        fbb.addOffset(6, genderOffset);
        fbb.addInt64(7, object.localId ?? 0);
        fbb.finish(fbb.endTable());
        return object.localId ?? 0;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final localIdParam = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          18,
        );
        final constituentIDParam = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          6,
        );
        final roleParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 8);
        final nameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 10);
        final constituentULAN_URLParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 12);
        final constituentWikidata_URLParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 14);
        final genderParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 16);
        final object = ConstituentModel(
          localId: localIdParam,
          constituentID: constituentIDParam,
          role: roleParam,
          name: nameParam,
          constituentULAN_URL: constituentULAN_URLParam,
          constituentWikidata_URL: constituentWikidata_URLParam,
          gender: genderParam,
        );

        return object;
      },
    ),
    DepartmentModel: obx_int.EntityDefinition<DepartmentModel>(
      model: _entities[1],
      toOneRelations: (DepartmentModel object) => [],
      toManyRelations: (DepartmentModel object) => {},
      getId: (DepartmentModel object) => object.localId,
      setId: (DepartmentModel object, int id) {
        if (object.localId != id) {
          throw ArgumentError(
            'Field DepartmentModel.localId is read-only '
            '(final or getter-only) and it was declared to be self-assigned. '
            'However, the currently inserted object (.localId=${object.localId}) '
            "doesn't match the inserted ID (ID $id). "
            'You must assign an ID before calling [box.put()].',
          );
        }
      },
      objectToFB: (DepartmentModel object, fb.Builder fbb) {
        final displayNameOffset =
            object.displayName == null
                ? null
                : fbb.writeString(object.displayName!);
        fbb.startTable(5);
        fbb.addInt64(1, object.departmentId);
        fbb.addOffset(2, displayNameOffset);
        fbb.addInt64(3, object.localId ?? 0);
        fbb.finish(fbb.endTable());
        return object.localId ?? 0;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final localIdParam = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          10,
        );
        final departmentIdParam = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          6,
        );
        final displayNameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 8);
        final object = DepartmentModel(
          localId: localIdParam,
          departmentId: departmentIdParam,
          displayName: displayNameParam,
        );

        return object;
      },
    ),
    MetObjectModel: obx_int.EntityDefinition<MetObjectModel>(
      model: _entities[2],
      toOneRelations: (MetObjectModel object) => [],
      toManyRelations: (MetObjectModel object) => {},
      getId: (MetObjectModel object) => object.localId,
      setId: (MetObjectModel object, int id) {
        if (object.localId != id) {
          throw ArgumentError(
            'Field MetObjectModel.localId is read-only '
            '(final or getter-only) and it was declared to be self-assigned. '
            'However, the currently inserted object (.localId=${object.localId}) '
            "doesn't match the inserted ID (ID $id). "
            'You must assign an ID before calling [box.put()].',
          );
        }
      },
      objectToFB: (MetObjectModel object, fb.Builder fbb) {
        final accessionNumberOffset =
            object.accessionNumber == null
                ? null
                : fbb.writeString(object.accessionNumber!);
        final accessionYearOffset =
            object.accessionYear == null
                ? null
                : fbb.writeString(object.accessionYear!);
        final primaryImageOffset =
            object.primaryImage == null
                ? null
                : fbb.writeString(object.primaryImage!);
        final primaryImageSmallOffset =
            object.primaryImageSmall == null
                ? null
                : fbb.writeString(object.primaryImageSmall!);
        final departmentOffset =
            object.department == null
                ? null
                : fbb.writeString(object.department!);
        final objectNameOffset =
            object.objectName == null
                ? null
                : fbb.writeString(object.objectName!);
        final titleOffset =
            object.title == null ? null : fbb.writeString(object.title!);
        final cultureOffset =
            object.culture == null ? null : fbb.writeString(object.culture!);
        final periodOffset =
            object.period == null ? null : fbb.writeString(object.period!);
        final dynastyOffset =
            object.dynasty == null ? null : fbb.writeString(object.dynasty!);
        final reignOffset =
            object.reign == null ? null : fbb.writeString(object.reign!);
        final portfolioOffset =
            object.portfolio == null
                ? null
                : fbb.writeString(object.portfolio!);
        final artistRoleOffset =
            object.artistRole == null
                ? null
                : fbb.writeString(object.artistRole!);
        final artistPrefixOffset =
            object.artistPrefix == null
                ? null
                : fbb.writeString(object.artistPrefix!);
        final artistDisplayNameOffset =
            object.artistDisplayName == null
                ? null
                : fbb.writeString(object.artistDisplayName!);
        final artistDisplayBioOffset =
            object.artistDisplayBio == null
                ? null
                : fbb.writeString(object.artistDisplayBio!);
        final artistSuffixOffset =
            object.artistSuffix == null
                ? null
                : fbb.writeString(object.artistSuffix!);
        final artistAlphaSortOffset =
            object.artistAlphaSort == null
                ? null
                : fbb.writeString(object.artistAlphaSort!);
        final artistNationalityOffset =
            object.artistNationality == null
                ? null
                : fbb.writeString(object.artistNationality!);
        final artistBeginDateOffset =
            object.artistBeginDate == null
                ? null
                : fbb.writeString(object.artistBeginDate!);
        final artistEndDateOffset =
            object.artistEndDate == null
                ? null
                : fbb.writeString(object.artistEndDate!);
        final artistGenderOffset =
            object.artistGender == null
                ? null
                : fbb.writeString(object.artistGender!);
        final artistWikidata_URLOffset =
            object.artistWikidata_URL == null
                ? null
                : fbb.writeString(object.artistWikidata_URL!);
        final artistULAN_URLOffset =
            object.artistULAN_URL == null
                ? null
                : fbb.writeString(object.artistULAN_URL!);
        final objectDateOffset =
            object.objectDate == null
                ? null
                : fbb.writeString(object.objectDate!);
        final mediumOffset =
            object.medium == null ? null : fbb.writeString(object.medium!);
        final dimensionsOffset =
            object.dimensions == null
                ? null
                : fbb.writeString(object.dimensions!);
        final creditLineOffset =
            object.creditLine == null
                ? null
                : fbb.writeString(object.creditLine!);
        final geographyTypeOffset =
            object.geographyType == null
                ? null
                : fbb.writeString(object.geographyType!);
        final cityOffset =
            object.city == null ? null : fbb.writeString(object.city!);
        final stateOffset =
            object.state == null ? null : fbb.writeString(object.state!);
        final countyOffset =
            object.county == null ? null : fbb.writeString(object.county!);
        final countryOffset =
            object.country == null ? null : fbb.writeString(object.country!);
        final regionOffset =
            object.region == null ? null : fbb.writeString(object.region!);
        final subregionOffset =
            object.subregion == null
                ? null
                : fbb.writeString(object.subregion!);
        final localeOffset =
            object.locale == null ? null : fbb.writeString(object.locale!);
        final locusOffset =
            object.locus == null ? null : fbb.writeString(object.locus!);
        final excavationOffset =
            object.excavation == null
                ? null
                : fbb.writeString(object.excavation!);
        final riverOffset =
            object.river == null ? null : fbb.writeString(object.river!);
        final classificationOffset =
            object.classification == null
                ? null
                : fbb.writeString(object.classification!);
        final rightsAndReproductionOffset =
            object.rightsAndReproduction == null
                ? null
                : fbb.writeString(object.rightsAndReproduction!);
        final linkResourceOffset =
            object.linkResource == null
                ? null
                : fbb.writeString(object.linkResource!);
        final metadataDateOffset =
            object.metadataDate == null
                ? null
                : fbb.writeString(object.metadataDate!);
        final repositoryOffset =
            object.repository == null
                ? null
                : fbb.writeString(object.repository!);
        final objectURLOffset =
            object.objectURL == null
                ? null
                : fbb.writeString(object.objectURL!);
        final objectWikidata_URLOffset =
            object.objectWikidata_URL == null
                ? null
                : fbb.writeString(object.objectWikidata_URL!);
        final GalleryNumberOffset =
            object.GalleryNumber == null
                ? null
                : fbb.writeString(object.GalleryNumber!);
        final additionalImagesOffset =
            object.additionalImages == null
                ? null
                : fbb.writeList(
                  object.additionalImages!
                      .map(fbb.writeString)
                      .toList(growable: false),
                );
        fbb.startTable(298);
        fbb.addInt64(178, object.localId ?? 0);
        fbb.addInt64(243, object.objectID);
        fbb.addBool(244, object.isHighlight);
        fbb.addOffset(245, accessionNumberOffset);
        fbb.addOffset(246, accessionYearOffset);
        fbb.addBool(247, object.isPublicDomain);
        fbb.addOffset(248, primaryImageOffset);
        fbb.addOffset(249, primaryImageSmallOffset);
        fbb.addOffset(250, departmentOffset);
        fbb.addOffset(251, objectNameOffset);
        fbb.addOffset(252, titleOffset);
        fbb.addOffset(253, cultureOffset);
        fbb.addOffset(254, periodOffset);
        fbb.addOffset(255, dynastyOffset);
        fbb.addOffset(256, reignOffset);
        fbb.addOffset(257, portfolioOffset);
        fbb.addOffset(258, artistRoleOffset);
        fbb.addOffset(259, artistPrefixOffset);
        fbb.addOffset(260, artistDisplayNameOffset);
        fbb.addOffset(261, artistDisplayBioOffset);
        fbb.addOffset(262, artistSuffixOffset);
        fbb.addOffset(263, artistAlphaSortOffset);
        fbb.addOffset(264, artistNationalityOffset);
        fbb.addOffset(265, artistBeginDateOffset);
        fbb.addOffset(266, artistEndDateOffset);
        fbb.addOffset(267, artistGenderOffset);
        fbb.addOffset(268, artistWikidata_URLOffset);
        fbb.addOffset(269, artistULAN_URLOffset);
        fbb.addOffset(270, objectDateOffset);
        fbb.addInt64(271, object.objectBeginDate);
        fbb.addInt64(272, object.objectEndDate);
        fbb.addOffset(273, mediumOffset);
        fbb.addOffset(274, dimensionsOffset);
        fbb.addOffset(275, creditLineOffset);
        fbb.addOffset(276, geographyTypeOffset);
        fbb.addOffset(277, cityOffset);
        fbb.addOffset(278, stateOffset);
        fbb.addOffset(279, countyOffset);
        fbb.addOffset(280, countryOffset);
        fbb.addOffset(281, regionOffset);
        fbb.addOffset(282, subregionOffset);
        fbb.addOffset(283, localeOffset);
        fbb.addOffset(284, locusOffset);
        fbb.addOffset(285, excavationOffset);
        fbb.addOffset(286, riverOffset);
        fbb.addOffset(287, classificationOffset);
        fbb.addOffset(288, rightsAndReproductionOffset);
        fbb.addOffset(289, linkResourceOffset);
        fbb.addOffset(290, metadataDateOffset);
        fbb.addOffset(291, repositoryOffset);
        fbb.addOffset(292, objectURLOffset);
        fbb.addOffset(293, objectWikidata_URLOffset);
        fbb.addBool(294, object.isTimelineWork);
        fbb.addOffset(295, GalleryNumberOffset);
        fbb.addOffset(296, additionalImagesOffset);
        fbb.finish(fbb.endTable());
        return object.localId ?? 0;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final localIdParam = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          360,
        );
        final objectIDParam = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          490,
        );
        final isHighlightParam = const fb.BoolReader().vTableGetNullable(
          buffer,
          rootOffset,
          492,
        );
        final accessionNumberParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 494);
        final accessionYearParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 496);
        final isPublicDomainParam = const fb.BoolReader().vTableGetNullable(
          buffer,
          rootOffset,
          498,
        );
        final primaryImageParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 500);
        final primaryImageSmallParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 502);
        final additionalImagesParam = const fb.ListReader<String>(
          fb.StringReader(asciiOptimization: true),
          lazy: false,
        ).vTableGetNullable(buffer, rootOffset, 596);
        final departmentParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 504);
        final objectNameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 506);
        final titleParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 508);
        final cultureParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 510);
        final periodParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 512);
        final dynastyParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 514);
        final reignParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 516);
        final portfolioParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 518);
        final artistRoleParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 520);
        final artistPrefixParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 522);
        final artistDisplayNameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 524);
        final artistDisplayBioParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 526);
        final artistSuffixParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 528);
        final artistAlphaSortParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 530);
        final artistNationalityParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 532);
        final artistBeginDateParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 534);
        final artistEndDateParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 536);
        final artistGenderParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 538);
        final artistWikidata_URLParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 540);
        final artistULAN_URLParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 542);
        final objectDateParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 544);
        final objectBeginDateParam = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          546,
        );
        final objectEndDateParam = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          548,
        );
        final mediumParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 550);
        final dimensionsParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 552);
        final creditLineParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 554);
        final geographyTypeParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 556);
        final cityParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 558);
        final stateParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 560);
        final countyParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 562);
        final countryParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 564);
        final regionParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 566);
        final subregionParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 568);
        final localeParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 570);
        final locusParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 572);
        final excavationParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 574);
        final riverParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 576);
        final classificationParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 578);
        final rightsAndReproductionParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 580);
        final linkResourceParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 582);
        final metadataDateParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 584);
        final repositoryParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 586);
        final objectURLParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 588);
        final objectWikidata_URLParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 590);
        final isTimelineWorkParam = const fb.BoolReader().vTableGetNullable(
          buffer,
          rootOffset,
          592,
        );
        final GalleryNumberParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 594);
        final object = MetObjectModel(
          localId: localIdParam,
          objectID: objectIDParam,
          isHighlight: isHighlightParam,
          accessionNumber: accessionNumberParam,
          accessionYear: accessionYearParam,
          isPublicDomain: isPublicDomainParam,
          primaryImage: primaryImageParam,
          primaryImageSmall: primaryImageSmallParam,
          additionalImages: additionalImagesParam,
          department: departmentParam,
          objectName: objectNameParam,
          title: titleParam,
          culture: cultureParam,
          period: periodParam,
          dynasty: dynastyParam,
          reign: reignParam,
          portfolio: portfolioParam,
          artistRole: artistRoleParam,
          artistPrefix: artistPrefixParam,
          artistDisplayName: artistDisplayNameParam,
          artistDisplayBio: artistDisplayBioParam,
          artistSuffix: artistSuffixParam,
          artistAlphaSort: artistAlphaSortParam,
          artistNationality: artistNationalityParam,
          artistBeginDate: artistBeginDateParam,
          artistEndDate: artistEndDateParam,
          artistGender: artistGenderParam,
          artistWikidata_URL: artistWikidata_URLParam,
          artistULAN_URL: artistULAN_URLParam,
          objectDate: objectDateParam,
          objectBeginDate: objectBeginDateParam,
          objectEndDate: objectEndDateParam,
          medium: mediumParam,
          dimensions: dimensionsParam,
          creditLine: creditLineParam,
          geographyType: geographyTypeParam,
          city: cityParam,
          state: stateParam,
          county: countyParam,
          country: countryParam,
          region: regionParam,
          subregion: subregionParam,
          locale: localeParam,
          locus: locusParam,
          excavation: excavationParam,
          river: riverParam,
          classification: classificationParam,
          rightsAndReproduction: rightsAndReproductionParam,
          linkResource: linkResourceParam,
          metadataDate: metadataDateParam,
          repository: repositoryParam,
          objectURL: objectURLParam,
          objectWikidata_URL: objectWikidata_URLParam,
          isTimelineWork: isTimelineWorkParam,
          GalleryNumber: GalleryNumberParam,
        );

        return object;
      },
    ),
    MetObjectsModel: obx_int.EntityDefinition<MetObjectsModel>(
      model: _entities[3],
      toOneRelations: (MetObjectsModel object) => [],
      toManyRelations: (MetObjectsModel object) => {},
      getId: (MetObjectsModel object) => object.localId,
      setId: (MetObjectsModel object, int id) {
        if (object.localId != id) {
          throw ArgumentError(
            'Field MetObjectsModel.localId is read-only '
            '(final or getter-only) and it was declared to be self-assigned. '
            'However, the currently inserted object (.localId=${object.localId}) '
            "doesn't match the inserted ID (ID $id). "
            'You must assign an ID before calling [box.put()].',
          );
        }
      },
      objectToFB: (MetObjectsModel object, fb.Builder fbb) {
        final objectIDsOffset =
            object.objectIDs == null
                ? null
                : fbb.writeListInt64(object.objectIDs!);
        fbb.startTable(4);
        fbb.addInt64(0, object.localId ?? 0);
        fbb.addInt64(1, object.total);
        fbb.addOffset(2, objectIDsOffset);
        fbb.finish(fbb.endTable());
        return object.localId ?? 0;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final localIdParam = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          4,
        );
        final totalParam = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          6,
        );
        final objectIDsParam = const fb.ListReader<int>(
          fb.Int64Reader(),
          lazy: false,
        ).vTableGetNullable(buffer, rootOffset, 8);
        final object = MetObjectsModel(
          localId: localIdParam,
          total: totalParam,
          objectIDs: objectIDsParam,
        );

        return object;
      },
    ),
    MetSearchModel: obx_int.EntityDefinition<MetSearchModel>(
      model: _entities[4],
      toOneRelations: (MetSearchModel object) => [],
      toManyRelations: (MetSearchModel object) => {},
      getId: (MetSearchModel object) => object.localId,
      setId: (MetSearchModel object, int id) {
        if (object.localId != id) {
          throw ArgumentError(
            'Field MetSearchModel.localId is read-only '
            '(final or getter-only) and it was declared to be self-assigned. '
            'However, the currently inserted object (.localId=${object.localId}) '
            "doesn't match the inserted ID (ID $id). "
            'You must assign an ID before calling [box.put()].',
          );
        }
      },
      objectToFB: (MetSearchModel object, fb.Builder fbb) {
        final objectIDsOffset =
            object.objectIDs == null
                ? null
                : fbb.writeListInt64(object.objectIDs!);
        fbb.startTable(4);
        fbb.addInt64(0, object.localId ?? 0);
        fbb.addInt64(1, object.total);
        fbb.addOffset(2, objectIDsOffset);
        fbb.finish(fbb.endTable());
        return object.localId ?? 0;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final localIdParam = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          4,
        );
        final totalParam = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          6,
        );
        final objectIDsParam = const fb.ListReader<int>(
          fb.Int64Reader(),
          lazy: false,
        ).vTableGetNullable(buffer, rootOffset, 8);
        final object = MetSearchModel(
          localId: localIdParam,
          total: totalParam,
          objectIDs: objectIDsParam,
        );

        return object;
      },
    ),
    TagModel: obx_int.EntityDefinition<TagModel>(
      model: _entities[5],
      toOneRelations: (TagModel object) => [],
      toManyRelations: (TagModel object) => {},
      getId: (TagModel object) => object.localId,
      setId: (TagModel object, int id) {
        if (object.localId != id) {
          throw ArgumentError(
            'Field TagModel.localId is read-only '
            '(final or getter-only) and it was declared to be self-assigned. '
            'However, the currently inserted object (.localId=${object.localId}) '
            "doesn't match the inserted ID (ID $id). "
            'You must assign an ID before calling [box.put()].',
          );
        }
      },
      objectToFB: (TagModel object, fb.Builder fbb) {
        final termOffset =
            object.term == null ? null : fbb.writeString(object.term!);
        final AAT_URLOffset =
            object.AAT_URL == null ? null : fbb.writeString(object.AAT_URL!);
        final Wikidata_URLOffset =
            object.Wikidata_URL == null
                ? null
                : fbb.writeString(object.Wikidata_URL!);
        fbb.startTable(5);
        fbb.addInt64(0, object.localId ?? 0);
        fbb.addOffset(1, termOffset);
        fbb.addOffset(2, AAT_URLOffset);
        fbb.addOffset(3, Wikidata_URLOffset);
        fbb.finish(fbb.endTable());
        return object.localId ?? 0;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final localIdParam = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          4,
        );
        final termParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 6);
        final AAT_URLParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 8);
        final Wikidata_URLParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 10);
        final object = TagModel(
          localId: localIdParam,
          term: termParam,
          AAT_URL: AAT_URLParam,
          Wikidata_URL: Wikidata_URLParam,
        );

        return object;
      },
    ),
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [ConstituentModel] entity fields to define ObjectBox queries.
class ConstituentModel_ {
  /// See [ConstituentModel.constituentID].
  static final constituentID = obx.QueryIntegerProperty<ConstituentModel>(
    _entities[0].properties[0],
  );

  /// See [ConstituentModel.role].
  static final role = obx.QueryStringProperty<ConstituentModel>(
    _entities[0].properties[1],
  );

  /// See [ConstituentModel.name].
  static final name = obx.QueryStringProperty<ConstituentModel>(
    _entities[0].properties[2],
  );

  /// See [ConstituentModel.constituentULAN_URL].
  static final constituentULAN_URL = obx.QueryStringProperty<ConstituentModel>(
    _entities[0].properties[3],
  );

  /// See [ConstituentModel.constituentWikidata_URL].
  static final constituentWikidata_URL =
      obx.QueryStringProperty<ConstituentModel>(_entities[0].properties[4]);

  /// See [ConstituentModel.gender].
  static final gender = obx.QueryStringProperty<ConstituentModel>(
    _entities[0].properties[5],
  );

  /// See [ConstituentModel.localId].
  static final localId = obx.QueryIntegerProperty<ConstituentModel>(
    _entities[0].properties[6],
  );
}

/// [DepartmentModel] entity fields to define ObjectBox queries.
class DepartmentModel_ {
  /// See [DepartmentModel.departmentId].
  static final departmentId = obx.QueryIntegerProperty<DepartmentModel>(
    _entities[1].properties[0],
  );

  /// See [DepartmentModel.displayName].
  static final displayName = obx.QueryStringProperty<DepartmentModel>(
    _entities[1].properties[1],
  );

  /// See [DepartmentModel.localId].
  static final localId = obx.QueryIntegerProperty<DepartmentModel>(
    _entities[1].properties[2],
  );
}

/// [MetObjectModel] entity fields to define ObjectBox queries.
class MetObjectModel_ {
  /// See [MetObjectModel.localId].
  static final localId = obx.QueryIntegerProperty<MetObjectModel>(
    _entities[2].properties[0],
  );

  /// See [MetObjectModel.objectID].
  static final objectID = obx.QueryIntegerProperty<MetObjectModel>(
    _entities[2].properties[1],
  );

  /// See [MetObjectModel.isHighlight].
  static final isHighlight = obx.QueryBooleanProperty<MetObjectModel>(
    _entities[2].properties[2],
  );

  /// See [MetObjectModel.accessionNumber].
  static final accessionNumber = obx.QueryStringProperty<MetObjectModel>(
    _entities[2].properties[3],
  );

  /// See [MetObjectModel.accessionYear].
  static final accessionYear = obx.QueryStringProperty<MetObjectModel>(
    _entities[2].properties[4],
  );

  /// See [MetObjectModel.isPublicDomain].
  static final isPublicDomain = obx.QueryBooleanProperty<MetObjectModel>(
    _entities[2].properties[5],
  );

  /// See [MetObjectModel.primaryImage].
  static final primaryImage = obx.QueryStringProperty<MetObjectModel>(
    _entities[2].properties[6],
  );

  /// See [MetObjectModel.primaryImageSmall].
  static final primaryImageSmall = obx.QueryStringProperty<MetObjectModel>(
    _entities[2].properties[7],
  );

  /// See [MetObjectModel.department].
  static final department = obx.QueryStringProperty<MetObjectModel>(
    _entities[2].properties[8],
  );

  /// See [MetObjectModel.objectName].
  static final objectName = obx.QueryStringProperty<MetObjectModel>(
    _entities[2].properties[9],
  );

  /// See [MetObjectModel.title].
  static final title = obx.QueryStringProperty<MetObjectModel>(
    _entities[2].properties[10],
  );

  /// See [MetObjectModel.culture].
  static final culture = obx.QueryStringProperty<MetObjectModel>(
    _entities[2].properties[11],
  );

  /// See [MetObjectModel.period].
  static final period = obx.QueryStringProperty<MetObjectModel>(
    _entities[2].properties[12],
  );

  /// See [MetObjectModel.dynasty].
  static final dynasty = obx.QueryStringProperty<MetObjectModel>(
    _entities[2].properties[13],
  );

  /// See [MetObjectModel.reign].
  static final reign = obx.QueryStringProperty<MetObjectModel>(
    _entities[2].properties[14],
  );

  /// See [MetObjectModel.portfolio].
  static final portfolio = obx.QueryStringProperty<MetObjectModel>(
    _entities[2].properties[15],
  );

  /// See [MetObjectModel.artistRole].
  static final artistRole = obx.QueryStringProperty<MetObjectModel>(
    _entities[2].properties[16],
  );

  /// See [MetObjectModel.artistPrefix].
  static final artistPrefix = obx.QueryStringProperty<MetObjectModel>(
    _entities[2].properties[17],
  );

  /// See [MetObjectModel.artistDisplayName].
  static final artistDisplayName = obx.QueryStringProperty<MetObjectModel>(
    _entities[2].properties[18],
  );

  /// See [MetObjectModel.artistDisplayBio].
  static final artistDisplayBio = obx.QueryStringProperty<MetObjectModel>(
    _entities[2].properties[19],
  );

  /// See [MetObjectModel.artistSuffix].
  static final artistSuffix = obx.QueryStringProperty<MetObjectModel>(
    _entities[2].properties[20],
  );

  /// See [MetObjectModel.artistAlphaSort].
  static final artistAlphaSort = obx.QueryStringProperty<MetObjectModel>(
    _entities[2].properties[21],
  );

  /// See [MetObjectModel.artistNationality].
  static final artistNationality = obx.QueryStringProperty<MetObjectModel>(
    _entities[2].properties[22],
  );

  /// See [MetObjectModel.artistBeginDate].
  static final artistBeginDate = obx.QueryStringProperty<MetObjectModel>(
    _entities[2].properties[23],
  );

  /// See [MetObjectModel.artistEndDate].
  static final artistEndDate = obx.QueryStringProperty<MetObjectModel>(
    _entities[2].properties[24],
  );

  /// See [MetObjectModel.artistGender].
  static final artistGender = obx.QueryStringProperty<MetObjectModel>(
    _entities[2].properties[25],
  );

  /// See [MetObjectModel.artistWikidata_URL].
  static final artistWikidata_URL = obx.QueryStringProperty<MetObjectModel>(
    _entities[2].properties[26],
  );

  /// See [MetObjectModel.artistULAN_URL].
  static final artistULAN_URL = obx.QueryStringProperty<MetObjectModel>(
    _entities[2].properties[27],
  );

  /// See [MetObjectModel.objectDate].
  static final objectDate = obx.QueryStringProperty<MetObjectModel>(
    _entities[2].properties[28],
  );

  /// See [MetObjectModel.objectBeginDate].
  static final objectBeginDate = obx.QueryIntegerProperty<MetObjectModel>(
    _entities[2].properties[29],
  );

  /// See [MetObjectModel.objectEndDate].
  static final objectEndDate = obx.QueryIntegerProperty<MetObjectModel>(
    _entities[2].properties[30],
  );

  /// See [MetObjectModel.medium].
  static final medium = obx.QueryStringProperty<MetObjectModel>(
    _entities[2].properties[31],
  );

  /// See [MetObjectModel.dimensions].
  static final dimensions = obx.QueryStringProperty<MetObjectModel>(
    _entities[2].properties[32],
  );

  /// See [MetObjectModel.creditLine].
  static final creditLine = obx.QueryStringProperty<MetObjectModel>(
    _entities[2].properties[33],
  );

  /// See [MetObjectModel.geographyType].
  static final geographyType = obx.QueryStringProperty<MetObjectModel>(
    _entities[2].properties[34],
  );

  /// See [MetObjectModel.city].
  static final city = obx.QueryStringProperty<MetObjectModel>(
    _entities[2].properties[35],
  );

  /// See [MetObjectModel.state].
  static final state = obx.QueryStringProperty<MetObjectModel>(
    _entities[2].properties[36],
  );

  /// See [MetObjectModel.county].
  static final county = obx.QueryStringProperty<MetObjectModel>(
    _entities[2].properties[37],
  );

  /// See [MetObjectModel.country].
  static final country = obx.QueryStringProperty<MetObjectModel>(
    _entities[2].properties[38],
  );

  /// See [MetObjectModel.region].
  static final region = obx.QueryStringProperty<MetObjectModel>(
    _entities[2].properties[39],
  );

  /// See [MetObjectModel.subregion].
  static final subregion = obx.QueryStringProperty<MetObjectModel>(
    _entities[2].properties[40],
  );

  /// See [MetObjectModel.locale].
  static final locale = obx.QueryStringProperty<MetObjectModel>(
    _entities[2].properties[41],
  );

  /// See [MetObjectModel.locus].
  static final locus = obx.QueryStringProperty<MetObjectModel>(
    _entities[2].properties[42],
  );

  /// See [MetObjectModel.excavation].
  static final excavation = obx.QueryStringProperty<MetObjectModel>(
    _entities[2].properties[43],
  );

  /// See [MetObjectModel.river].
  static final river = obx.QueryStringProperty<MetObjectModel>(
    _entities[2].properties[44],
  );

  /// See [MetObjectModel.classification].
  static final classification = obx.QueryStringProperty<MetObjectModel>(
    _entities[2].properties[45],
  );

  /// See [MetObjectModel.rightsAndReproduction].
  static final rightsAndReproduction = obx.QueryStringProperty<MetObjectModel>(
    _entities[2].properties[46],
  );

  /// See [MetObjectModel.linkResource].
  static final linkResource = obx.QueryStringProperty<MetObjectModel>(
    _entities[2].properties[47],
  );

  /// See [MetObjectModel.metadataDate].
  static final metadataDate = obx.QueryStringProperty<MetObjectModel>(
    _entities[2].properties[48],
  );

  /// See [MetObjectModel.repository].
  static final repository = obx.QueryStringProperty<MetObjectModel>(
    _entities[2].properties[49],
  );

  /// See [MetObjectModel.objectURL].
  static final objectURL = obx.QueryStringProperty<MetObjectModel>(
    _entities[2].properties[50],
  );

  /// See [MetObjectModel.objectWikidata_URL].
  static final objectWikidata_URL = obx.QueryStringProperty<MetObjectModel>(
    _entities[2].properties[51],
  );

  /// See [MetObjectModel.isTimelineWork].
  static final isTimelineWork = obx.QueryBooleanProperty<MetObjectModel>(
    _entities[2].properties[52],
  );

  /// See [MetObjectModel.GalleryNumber].
  static final GalleryNumber = obx.QueryStringProperty<MetObjectModel>(
    _entities[2].properties[53],
  );

  /// See [MetObjectModel.additionalImages].
  static final additionalImages = obx.QueryStringVectorProperty<MetObjectModel>(
    _entities[2].properties[54],
  );
}

/// [MetObjectsModel] entity fields to define ObjectBox queries.
class MetObjectsModel_ {
  /// See [MetObjectsModel.localId].
  static final localId = obx.QueryIntegerProperty<MetObjectsModel>(
    _entities[3].properties[0],
  );

  /// See [MetObjectsModel.total].
  static final total = obx.QueryIntegerProperty<MetObjectsModel>(
    _entities[3].properties[1],
  );

  /// See [MetObjectsModel.objectIDs].
  static final objectIDs = obx.QueryIntegerVectorProperty<MetObjectsModel>(
    _entities[3].properties[2],
  );
}

/// [MetSearchModel] entity fields to define ObjectBox queries.
class MetSearchModel_ {
  /// See [MetSearchModel.localId].
  static final localId = obx.QueryIntegerProperty<MetSearchModel>(
    _entities[4].properties[0],
  );

  /// See [MetSearchModel.total].
  static final total = obx.QueryIntegerProperty<MetSearchModel>(
    _entities[4].properties[1],
  );

  /// See [MetSearchModel.objectIDs].
  static final objectIDs = obx.QueryIntegerVectorProperty<MetSearchModel>(
    _entities[4].properties[2],
  );
}

/// [TagModel] entity fields to define ObjectBox queries.
class TagModel_ {
  /// See [TagModel.localId].
  static final localId = obx.QueryIntegerProperty<TagModel>(
    _entities[5].properties[0],
  );

  /// See [TagModel.term].
  static final term = obx.QueryStringProperty<TagModel>(
    _entities[5].properties[1],
  );

  /// See [TagModel.AAT_URL].
  static final AAT_URL = obx.QueryStringProperty<TagModel>(
    _entities[5].properties[2],
  );

  /// See [TagModel.Wikidata_URL].
  static final Wikidata_URL = obx.QueryStringProperty<TagModel>(
    _entities[5].properties[3],
  );
}
