// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'app/domain/models/constituent_model.dart';
import 'app/domain/models/department_model.dart';
import 'app/domain/models/measurement_model.dart';
import 'app/domain/models/met_object_model.dart';
import 'app/domain/models/met_objects_model.dart';
import 'app/domain/models/met_search_model.dart';
import 'app/domain/models/tag_model.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
    id: const obx_int.IdUid(1, 3400714561225318792),
    name: 'ConstituentModel',
    lastPropertyId: const obx_int.IdUid(7, 6742092208559707318),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 858975680881863978),
        name: 'localId',
        type: 6,
        flags: 129,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 8237019104780005696),
        name: 'constituentID',
        type: 6,
        flags: 40,
        indexId: const obx_int.IdUid(1, 1373779809912196333),
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 5956796505865141312),
        name: 'role',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 7278609737335619156),
        name: 'name',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 8039553281109507225),
        name: 'constituentULAN_URL',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 5356279481757997731),
        name: 'constituentWikidata_URL',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 6742092208559707318),
        name: 'gender',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(2, 2017232906959307735),
    name: 'DepartmentModel',
    lastPropertyId: const obx_int.IdUid(3, 6606663235365601968),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 8541190894936816049),
        name: 'localId',
        type: 6,
        flags: 129,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 701757342209485310),
        name: 'departmentId',
        type: 6,
        flags: 40,
        indexId: const obx_int.IdUid(2, 8991154616135570840),
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 6606663235365601968),
        name: 'displayName',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(3, 19295087172538908),
    name: 'MetObjectModel',
    lastPropertyId: const obx_int.IdUid(60, 5701104902068035473),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 8569725401443730600),
        name: 'localId',
        type: 6,
        flags: 129,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 8850949076857509868),
        name: 'objectID',
        type: 6,
        flags: 40,
        indexId: const obx_int.IdUid(3, 3179128287111313662),
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(8, 1246064221375210085),
        name: 'isHighlight',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(9, 8213906074285237094),
        name: 'accessionNumber',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(10, 6859476580885186205),
        name: 'accessionYear',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(11, 2863433460750639516),
        name: 'isPublicDomain',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(12, 6433358298605640735),
        name: 'primaryImage',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(13, 4293914097721769077),
        name: 'primaryImageSmall',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(14, 3256089201836234279),
        name: 'department',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(15, 637964750654815158),
        name: 'objectName',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(16, 1899876831774155794),
        name: 'title',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(17, 4811149886337009590),
        name: 'culture',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(18, 6740526318252105467),
        name: 'period',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(19, 8044872882981247106),
        name: 'dynasty',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(20, 6476533786178793329),
        name: 'reign',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(21, 4009007414335140044),
        name: 'portfolio',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(22, 6392013296145334445),
        name: 'artistRole',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(23, 2884723141305536276),
        name: 'artistPrefix',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(24, 5319770070037076244),
        name: 'artistDisplayName',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(25, 4019410566082311519),
        name: 'artistDisplayBio',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(26, 4335234831674141135),
        name: 'artistSuffix',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(27, 5647166127784092549),
        name: 'artistAlphaSort',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(28, 1187120522440611822),
        name: 'artistNationality',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(29, 8148573156435617529),
        name: 'artistBeginDate',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(30, 4357208173911038043),
        name: 'artistEndDate',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(31, 6978906066991072685),
        name: 'artistGender',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(32, 3530031925565100705),
        name: 'artistWikidata_URL',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(33, 5832238431538768849),
        name: 'artistULAN_URL',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(34, 1310119803142339162),
        name: 'objectDate',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(35, 5146826989315782371),
        name: 'objectBeginDate',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(36, 4150914306655671306),
        name: 'objectEndDate',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(37, 2939317850475430262),
        name: 'medium',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(38, 8599000166281998703),
        name: 'dimensions',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(39, 5586774522521688518),
        name: 'creditLine',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(40, 580341848290219887),
        name: 'geographyType',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(41, 1462948432387207943),
        name: 'city',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(42, 2607318294896336595),
        name: 'state',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(43, 5875479300022449377),
        name: 'county',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(44, 8506085945349974153),
        name: 'country',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(45, 932744581821698503),
        name: 'region',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(46, 2773964459891023578),
        name: 'subregion',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(47, 1075038469112752830),
        name: 'locale',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(48, 3991533356564768474),
        name: 'locus',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(49, 402580704301922287),
        name: 'excavation',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(50, 6216360871538881033),
        name: 'river',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(51, 5805209746523616137),
        name: 'classification',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(52, 3015286402635989773),
        name: 'rightsAndReproduction',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(53, 3800532520952911700),
        name: 'linkResource',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(54, 4285008714072584125),
        name: 'metadataDate',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(55, 6177549352100240724),
        name: 'repository',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(56, 2174491260470893428),
        name: 'objectURL',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(57, 874218396473967476),
        name: 'objectWikidata_URL',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(58, 1329041339845301288),
        name: 'isTimelineWork',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(59, 142233467445303399),
        name: 'GalleryNumber',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(60, 5701104902068035473),
        name: 'additionalImages',
        type: 30,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(4, 6944301132044813922),
    name: 'MetObjectsModel',
    lastPropertyId: const obx_int.IdUid(3, 3472402247435446785),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 8118930839328507605),
        name: 'localId',
        type: 6,
        flags: 129,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 2476488723680415028),
        name: 'total',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 3472402247435446785),
        name: 'objectIDs',
        type: 27,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(5, 7580681416297406572),
    name: 'MetSearchModel',
    lastPropertyId: const obx_int.IdUid(3, 812520298563810270),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 8793896173728037508),
        name: 'localId',
        type: 6,
        flags: 129,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 6130821190851805672),
        name: 'total',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 812520298563810270),
        name: 'objectIDs',
        type: 27,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(6, 459039736759376053),
    name: 'TagModel',
    lastPropertyId: const obx_int.IdUid(4, 5620579902502729408),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 4125473571380684443),
        name: 'localId',
        type: 6,
        flags: 129,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 5008789740849911007),
        name: 'term',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 5432938675064905967),
        name: 'AAT_URL',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 5620579902502729408),
        name: 'Wikidata_URL',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore({
  String? directory,
  int? maxDBSizeInKB,
  int? maxDataSizeInKB,
  int? fileMode,
  int? maxReaders,
  bool queriesCaseSensitiveDefault = true,
  String? macosApplicationGroup,
}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(
    getObjectBoxModel(),
    directory: directory ?? (await defaultStoreDirectory()).path,
    maxDBSizeInKB: maxDBSizeInKB,
    maxDataSizeInKB: maxDataSizeInKB,
    fileMode: fileMode,
    maxReaders: maxReaders,
    queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
    macosApplicationGroup: macosApplicationGroup,
  );
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
    entities: _entities,
    lastEntityId: const obx_int.IdUid(6, 459039736759376053),
    lastIndexId: const obx_int.IdUid(3, 3179128287111313662),
    lastRelationId: const obx_int.IdUid(0, 0),
    lastSequenceId: const obx_int.IdUid(0, 0),
    retiredEntityUids: const [],
    retiredIndexUids: const [],
    retiredPropertyUids: const [
      6923034305603945876,
      6838816279598050857,
      4006036810968550409,
      8239150226732372093,
      4095372112770032433,
    ],
    retiredRelationUids: const [],
    modelVersion: 5,
    modelVersionParserMinimum: 5,
    version: 1,
  );

  final bindings = <Type, obx_int.EntityDefinition>{
    ConstituentModel: obx_int.EntityDefinition<ConstituentModel>(
      model: _entities[0],
      toOneRelations: (ConstituentModel object) => [],
      toManyRelations: (ConstituentModel object) => {},
      getId: (ConstituentModel object) => object.localId,
      setId: (ConstituentModel object, int id) {
        if (object.localId != id) {
          throw ArgumentError(
            'Field ConstituentModel.localId is read-only '
            '(final or getter-only) and it was declared to be self-assigned. '
            'However, the currently inserted object (.localId=${object.localId}) '
            "doesn't match the inserted ID (ID $id). "
            'You must assign an ID before calling [box.put()].',
          );
        }
      },
      objectToFB: (ConstituentModel object, fb.Builder fbb) {
        final roleOffset =
            object.role == null ? null : fbb.writeString(object.role!);
        final nameOffset =
            object.name == null ? null : fbb.writeString(object.name!);
        final constituentULAN_URLOffset =
            object.constituentULAN_URL == null
                ? null
                : fbb.writeString(object.constituentULAN_URL!);
        final constituentWikidata_URLOffset =
            object.constituentWikidata_URL == null
                ? null
                : fbb.writeString(object.constituentWikidata_URL!);
        final genderOffset =
            object.gender == null ? null : fbb.writeString(object.gender!);
        fbb.startTable(8);
        fbb.addInt64(0, object.localId ?? 0);
        fbb.addInt64(1, object.constituentID);
        fbb.addOffset(2, roleOffset);
        fbb.addOffset(3, nameOffset);
        fbb.addOffset(4, constituentULAN_URLOffset);
        fbb.addOffset(5, constituentWikidata_URLOffset);
        fbb.addOffset(6, genderOffset);
        fbb.finish(fbb.endTable());
        return object.localId ?? 0;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final localIdParam = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          4,
        );
        final constituentIDParam = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          6,
        );
        final roleParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 8);
        final nameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 10);
        final constituentULAN_URLParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 12);
        final constituentWikidata_URLParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 14);
        final genderParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 16);
        final object = ConstituentModel(
          localId: localIdParam,
          constituentID: constituentIDParam,
          role: roleParam,
          name: nameParam,
          constituentULAN_URL: constituentULAN_URLParam,
          constituentWikidata_URL: constituentWikidata_URLParam,
          gender: genderParam,
        );

        return object;
      },
    ),
    DepartmentModel: obx_int.EntityDefinition<DepartmentModel>(
      model: _entities[1],
      toOneRelations: (DepartmentModel object) => [],
      toManyRelations: (DepartmentModel object) => {},
      getId: (DepartmentModel object) => object.localId,
      setId: (DepartmentModel object, int id) {
        if (object.localId != id) {
          throw ArgumentError(
            'Field DepartmentModel.localId is read-only '
            '(final or getter-only) and it was declared to be self-assigned. '
            'However, the currently inserted object (.localId=${object.localId}) '
            "doesn't match the inserted ID (ID $id). "
            'You must assign an ID before calling [box.put()].',
          );
        }
      },
      objectToFB: (DepartmentModel object, fb.Builder fbb) {
        final displayNameOffset =
            object.displayName == null
                ? null
                : fbb.writeString(object.displayName!);
        fbb.startTable(4);
        fbb.addInt64(0, object.localId ?? 0);
        fbb.addInt64(1, object.departmentId);
        fbb.addOffset(2, displayNameOffset);
        fbb.finish(fbb.endTable());
        return object.localId ?? 0;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final localIdParam = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          4,
        );
        final departmentIdParam = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          6,
        );
        final displayNameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 8);
        final object = DepartmentModel(
          localId: localIdParam,
          departmentId: departmentIdParam,
          displayName: displayNameParam,
        );

        return object;
      },
    ),
    MetObjectModel: obx_int.EntityDefinition<MetObjectModel>(
      model: _entities[2],
      toOneRelations: (MetObjectModel object) => [],
      toManyRelations: (MetObjectModel object) => {},
      getId: (MetObjectModel object) => object.localId,
      setId: (MetObjectModel object, int id) {
        if (object.localId != id) {
          throw ArgumentError(
            'Field MetObjectModel.localId is read-only '
            '(final or getter-only) and it was declared to be self-assigned. '
            'However, the currently inserted object (.localId=${object.localId}) '
            "doesn't match the inserted ID (ID $id). "
            'You must assign an ID before calling [box.put()].',
          );
        }
      },
      objectToFB: (MetObjectModel object, fb.Builder fbb) {
        final accessionNumberOffset =
            object.accessionNumber == null
                ? null
                : fbb.writeString(object.accessionNumber!);
        final accessionYearOffset =
            object.accessionYear == null
                ? null
                : fbb.writeString(object.accessionYear!);
        final primaryImageOffset =
            object.primaryImage == null
                ? null
                : fbb.writeString(object.primaryImage!);
        final primaryImageSmallOffset =
            object.primaryImageSmall == null
                ? null
                : fbb.writeString(object.primaryImageSmall!);
        final departmentOffset =
            object.department == null
                ? null
                : fbb.writeString(object.department!);
        final objectNameOffset =
            object.objectName == null
                ? null
                : fbb.writeString(object.objectName!);
        final titleOffset =
            object.title == null ? null : fbb.writeString(object.title!);
        final cultureOffset =
            object.culture == null ? null : fbb.writeString(object.culture!);
        final periodOffset =
            object.period == null ? null : fbb.writeString(object.period!);
        final dynastyOffset =
            object.dynasty == null ? null : fbb.writeString(object.dynasty!);
        final reignOffset =
            object.reign == null ? null : fbb.writeString(object.reign!);
        final portfolioOffset =
            object.portfolio == null
                ? null
                : fbb.writeString(object.portfolio!);
        final artistRoleOffset =
            object.artistRole == null
                ? null
                : fbb.writeString(object.artistRole!);
        final artistPrefixOffset =
            object.artistPrefix == null
                ? null
                : fbb.writeString(object.artistPrefix!);
        final artistDisplayNameOffset =
            object.artistDisplayName == null
                ? null
                : fbb.writeString(object.artistDisplayName!);
        final artistDisplayBioOffset =
            object.artistDisplayBio == null
                ? null
                : fbb.writeString(object.artistDisplayBio!);
        final artistSuffixOffset =
            object.artistSuffix == null
                ? null
                : fbb.writeString(object.artistSuffix!);
        final artistAlphaSortOffset =
            object.artistAlphaSort == null
                ? null
                : fbb.writeString(object.artistAlphaSort!);
        final artistNationalityOffset =
            object.artistNationality == null
                ? null
                : fbb.writeString(object.artistNationality!);
        final artistBeginDateOffset =
            object.artistBeginDate == null
                ? null
                : fbb.writeString(object.artistBeginDate!);
        final artistEndDateOffset =
            object.artistEndDate == null
                ? null
                : fbb.writeString(object.artistEndDate!);
        final artistGenderOffset =
            object.artistGender == null
                ? null
                : fbb.writeString(object.artistGender!);
        final artistWikidata_URLOffset =
            object.artistWikidata_URL == null
                ? null
                : fbb.writeString(object.artistWikidata_URL!);
        final artistULAN_URLOffset =
            object.artistULAN_URL == null
                ? null
                : fbb.writeString(object.artistULAN_URL!);
        final objectDateOffset =
            object.objectDate == null
                ? null
                : fbb.writeString(object.objectDate!);
        final mediumOffset =
            object.medium == null ? null : fbb.writeString(object.medium!);
        final dimensionsOffset =
            object.dimensions == null
                ? null
                : fbb.writeString(object.dimensions!);
        final creditLineOffset =
            object.creditLine == null
                ? null
                : fbb.writeString(object.creditLine!);
        final geographyTypeOffset =
            object.geographyType == null
                ? null
                : fbb.writeString(object.geographyType!);
        final cityOffset =
            object.city == null ? null : fbb.writeString(object.city!);
        final stateOffset =
            object.state == null ? null : fbb.writeString(object.state!);
        final countyOffset =
            object.county == null ? null : fbb.writeString(object.county!);
        final countryOffset =
            object.country == null ? null : fbb.writeString(object.country!);
        final regionOffset =
            object.region == null ? null : fbb.writeString(object.region!);
        final subregionOffset =
            object.subregion == null
                ? null
                : fbb.writeString(object.subregion!);
        final localeOffset =
            object.locale == null ? null : fbb.writeString(object.locale!);
        final locusOffset =
            object.locus == null ? null : fbb.writeString(object.locus!);
        final excavationOffset =
            object.excavation == null
                ? null
                : fbb.writeString(object.excavation!);
        final riverOffset =
            object.river == null ? null : fbb.writeString(object.river!);
        final classificationOffset =
            object.classification == null
                ? null
                : fbb.writeString(object.classification!);
        final rightsAndReproductionOffset =
            object.rightsAndReproduction == null
                ? null
                : fbb.writeString(object.rightsAndReproduction!);
        final linkResourceOffset =
            object.linkResource == null
                ? null
                : fbb.writeString(object.linkResource!);
        final metadataDateOffset =
            object.metadataDate == null
                ? null
                : fbb.writeString(object.metadataDate!);
        final repositoryOffset =
            object.repository == null
                ? null
                : fbb.writeString(object.repository!);
        final objectURLOffset =
            object.objectURL == null
                ? null
                : fbb.writeString(object.objectURL!);
        final objectWikidata_URLOffset =
            object.objectWikidata_URL == null
                ? null
                : fbb.writeString(object.objectWikidata_URL!);
        final GalleryNumberOffset =
            object.GalleryNumber == null
                ? null
                : fbb.writeString(object.GalleryNumber!);
        final additionalImagesOffset =
            object.additionalImages == null
                ? null
                : fbb.writeList(
                  object.additionalImages!
                      .map(fbb.writeString)
                      .toList(growable: false),
                );
        fbb.startTable(61);
        fbb.addInt64(0, object.localId ?? 0);
        fbb.addInt64(6, object.objectID);
        fbb.addBool(7, object.isHighlight);
        fbb.addOffset(8, accessionNumberOffset);
        fbb.addOffset(9, accessionYearOffset);
        fbb.addBool(10, object.isPublicDomain);
        fbb.addOffset(11, primaryImageOffset);
        fbb.addOffset(12, primaryImageSmallOffset);
        fbb.addOffset(13, departmentOffset);
        fbb.addOffset(14, objectNameOffset);
        fbb.addOffset(15, titleOffset);
        fbb.addOffset(16, cultureOffset);
        fbb.addOffset(17, periodOffset);
        fbb.addOffset(18, dynastyOffset);
        fbb.addOffset(19, reignOffset);
        fbb.addOffset(20, portfolioOffset);
        fbb.addOffset(21, artistRoleOffset);
        fbb.addOffset(22, artistPrefixOffset);
        fbb.addOffset(23, artistDisplayNameOffset);
        fbb.addOffset(24, artistDisplayBioOffset);
        fbb.addOffset(25, artistSuffixOffset);
        fbb.addOffset(26, artistAlphaSortOffset);
        fbb.addOffset(27, artistNationalityOffset);
        fbb.addOffset(28, artistBeginDateOffset);
        fbb.addOffset(29, artistEndDateOffset);
        fbb.addOffset(30, artistGenderOffset);
        fbb.addOffset(31, artistWikidata_URLOffset);
        fbb.addOffset(32, artistULAN_URLOffset);
        fbb.addOffset(33, objectDateOffset);
        fbb.addInt64(34, object.objectBeginDate);
        fbb.addInt64(35, object.objectEndDate);
        fbb.addOffset(36, mediumOffset);
        fbb.addOffset(37, dimensionsOffset);
        fbb.addOffset(38, creditLineOffset);
        fbb.addOffset(39, geographyTypeOffset);
        fbb.addOffset(40, cityOffset);
        fbb.addOffset(41, stateOffset);
        fbb.addOffset(42, countyOffset);
        fbb.addOffset(43, countryOffset);
        fbb.addOffset(44, regionOffset);
        fbb.addOffset(45, subregionOffset);
        fbb.addOffset(46, localeOffset);
        fbb.addOffset(47, locusOffset);
        fbb.addOffset(48, excavationOffset);
        fbb.addOffset(49, riverOffset);
        fbb.addOffset(50, classificationOffset);
        fbb.addOffset(51, rightsAndReproductionOffset);
        fbb.addOffset(52, linkResourceOffset);
        fbb.addOffset(53, metadataDateOffset);
        fbb.addOffset(54, repositoryOffset);
        fbb.addOffset(55, objectURLOffset);
        fbb.addOffset(56, objectWikidata_URLOffset);
        fbb.addBool(57, object.isTimelineWork);
        fbb.addOffset(58, GalleryNumberOffset);
        fbb.addOffset(59, additionalImagesOffset);
        fbb.finish(fbb.endTable());
        return object.localId ?? 0;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final localIdParam = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          4,
        );
        final objectIDParam = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          16,
        );
        final isHighlightParam = const fb.BoolReader().vTableGetNullable(
          buffer,
          rootOffset,
          18,
        );
        final accessionNumberParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 20);
        final accessionYearParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 22);
        final isPublicDomainParam = const fb.BoolReader().vTableGetNullable(
          buffer,
          rootOffset,
          24,
        );
        final primaryImageParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 26);
        final primaryImageSmallParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 28);
        final additionalImagesParam = const fb.ListReader<String>(
          fb.StringReader(asciiOptimization: true),
          lazy: false,
        ).vTableGetNullable(buffer, rootOffset, 122);
        final departmentParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 30);
        final objectNameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 32);
        final titleParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 34);
        final cultureParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 36);
        final periodParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 38);
        final dynastyParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 40);
        final reignParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 42);
        final portfolioParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 44);
        final artistRoleParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 46);
        final artistPrefixParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 48);
        final artistDisplayNameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 50);
        final artistDisplayBioParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 52);
        final artistSuffixParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 54);
        final artistAlphaSortParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 56);
        final artistNationalityParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 58);
        final artistBeginDateParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 60);
        final artistEndDateParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 62);
        final artistGenderParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 64);
        final artistWikidata_URLParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 66);
        final artistULAN_URLParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 68);
        final objectDateParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 70);
        final objectBeginDateParam = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          72,
        );
        final objectEndDateParam = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          74,
        );
        final mediumParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 76);
        final dimensionsParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 78);
        final creditLineParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 80);
        final geographyTypeParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 82);
        final cityParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 84);
        final stateParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 86);
        final countyParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 88);
        final countryParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 90);
        final regionParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 92);
        final subregionParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 94);
        final localeParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 96);
        final locusParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 98);
        final excavationParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 100);
        final riverParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 102);
        final classificationParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 104);
        final rightsAndReproductionParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 106);
        final linkResourceParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 108);
        final metadataDateParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 110);
        final repositoryParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 112);
        final objectURLParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 114);
        final objectWikidata_URLParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 116);
        final isTimelineWorkParam = const fb.BoolReader().vTableGetNullable(
          buffer,
          rootOffset,
          118,
        );
        final GalleryNumberParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 120);
        final object = MetObjectModel(
          localId: localIdParam,
          objectID: objectIDParam,
          isHighlight: isHighlightParam,
          accessionNumber: accessionNumberParam,
          accessionYear: accessionYearParam,
          isPublicDomain: isPublicDomainParam,
          primaryImage: primaryImageParam,
          primaryImageSmall: primaryImageSmallParam,
          additionalImages: additionalImagesParam,
          department: departmentParam,
          objectName: objectNameParam,
          title: titleParam,
          culture: cultureParam,
          period: periodParam,
          dynasty: dynastyParam,
          reign: reignParam,
          portfolio: portfolioParam,
          artistRole: artistRoleParam,
          artistPrefix: artistPrefixParam,
          artistDisplayName: artistDisplayNameParam,
          artistDisplayBio: artistDisplayBioParam,
          artistSuffix: artistSuffixParam,
          artistAlphaSort: artistAlphaSortParam,
          artistNationality: artistNationalityParam,
          artistBeginDate: artistBeginDateParam,
          artistEndDate: artistEndDateParam,
          artistGender: artistGenderParam,
          artistWikidata_URL: artistWikidata_URLParam,
          artistULAN_URL: artistULAN_URLParam,
          objectDate: objectDateParam,
          objectBeginDate: objectBeginDateParam,
          objectEndDate: objectEndDateParam,
          medium: mediumParam,
          dimensions: dimensionsParam,
          creditLine: creditLineParam,
          geographyType: geographyTypeParam,
          city: cityParam,
          state: stateParam,
          county: countyParam,
          country: countryParam,
          region: regionParam,
          subregion: subregionParam,
          locale: localeParam,
          locus: locusParam,
          excavation: excavationParam,
          river: riverParam,
          classification: classificationParam,
          rightsAndReproduction: rightsAndReproductionParam,
          linkResource: linkResourceParam,
          metadataDate: metadataDateParam,
          repository: repositoryParam,
          objectURL: objectURLParam,
          objectWikidata_URL: objectWikidata_URLParam,
          isTimelineWork: isTimelineWorkParam,
          GalleryNumber: GalleryNumberParam,
        );

        return object;
      },
    ),
    MetObjectsModel: obx_int.EntityDefinition<MetObjectsModel>(
      model: _entities[3],
      toOneRelations: (MetObjectsModel object) => [],
      toManyRelations: (MetObjectsModel object) => {},
      getId: (MetObjectsModel object) => object.localId,
      setId: (MetObjectsModel object, int id) {
        if (object.localId != id) {
          throw ArgumentError(
            'Field MetObjectsModel.localId is read-only '
            '(final or getter-only) and it was declared to be self-assigned. '
            'However, the currently inserted object (.localId=${object.localId}) '
            "doesn't match the inserted ID (ID $id). "
            'You must assign an ID before calling [box.put()].',
          );
        }
      },
      objectToFB: (MetObjectsModel object, fb.Builder fbb) {
        final objectIDsOffset =
            object.objectIDs == null
                ? null
                : fbb.writeListInt64(object.objectIDs!);
        fbb.startTable(4);
        fbb.addInt64(0, object.localId ?? 0);
        fbb.addInt64(1, object.total);
        fbb.addOffset(2, objectIDsOffset);
        fbb.finish(fbb.endTable());
        return object.localId ?? 0;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final localIdParam = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          4,
        );
        final totalParam = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          6,
        );
        final objectIDsParam = const fb.ListReader<int>(
          fb.Int64Reader(),
          lazy: false,
        ).vTableGetNullable(buffer, rootOffset, 8);
        final object = MetObjectsModel(
          localId: localIdParam,
          total: totalParam,
          objectIDs: objectIDsParam,
        );

        return object;
      },
    ),
    MetSearchModel: obx_int.EntityDefinition<MetSearchModel>(
      model: _entities[4],
      toOneRelations: (MetSearchModel object) => [],
      toManyRelations: (MetSearchModel object) => {},
      getId: (MetSearchModel object) => object.localId,
      setId: (MetSearchModel object, int id) {
        if (object.localId != id) {
          throw ArgumentError(
            'Field MetSearchModel.localId is read-only '
            '(final or getter-only) and it was declared to be self-assigned. '
            'However, the currently inserted object (.localId=${object.localId}) '
            "doesn't match the inserted ID (ID $id). "
            'You must assign an ID before calling [box.put()].',
          );
        }
      },
      objectToFB: (MetSearchModel object, fb.Builder fbb) {
        final objectIDsOffset =
            object.objectIDs == null
                ? null
                : fbb.writeListInt64(object.objectIDs!);
        fbb.startTable(4);
        fbb.addInt64(0, object.localId ?? 0);
        fbb.addInt64(1, object.total);
        fbb.addOffset(2, objectIDsOffset);
        fbb.finish(fbb.endTable());
        return object.localId ?? 0;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final localIdParam = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          4,
        );
        final totalParam = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          6,
        );
        final objectIDsParam = const fb.ListReader<int>(
          fb.Int64Reader(),
          lazy: false,
        ).vTableGetNullable(buffer, rootOffset, 8);
        final object = MetSearchModel(
          localId: localIdParam,
          total: totalParam,
          objectIDs: objectIDsParam,
        );

        return object;
      },
    ),
    TagModel: obx_int.EntityDefinition<TagModel>(
      model: _entities[5],
      toOneRelations: (TagModel object) => [],
      toManyRelations: (TagModel object) => {},
      getId: (TagModel object) => object.localId,
      setId: (TagModel object, int id) {
        if (object.localId != id) {
          throw ArgumentError(
            'Field TagModel.localId is read-only '
            '(final or getter-only) and it was declared to be self-assigned. '
            'However, the currently inserted object (.localId=${object.localId}) '
            "doesn't match the inserted ID (ID $id). "
            'You must assign an ID before calling [box.put()].',
          );
        }
      },
      objectToFB: (TagModel object, fb.Builder fbb) {
        final termOffset =
            object.term == null ? null : fbb.writeString(object.term!);
        final AAT_URLOffset =
            object.AAT_URL == null ? null : fbb.writeString(object.AAT_URL!);
        final Wikidata_URLOffset =
            object.Wikidata_URL == null
                ? null
                : fbb.writeString(object.Wikidata_URL!);
        fbb.startTable(5);
        fbb.addInt64(0, object.localId ?? 0);
        fbb.addOffset(1, termOffset);
        fbb.addOffset(2, AAT_URLOffset);
        fbb.addOffset(3, Wikidata_URLOffset);
        fbb.finish(fbb.endTable());
        return object.localId ?? 0;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final localIdParam = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          4,
        );
        final termParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 6);
        final AAT_URLParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 8);
        final Wikidata_URLParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 10);
        final object = TagModel(
          localId: localIdParam,
          term: termParam,
          AAT_URL: AAT_URLParam,
          Wikidata_URL: Wikidata_URLParam,
        );

        return object;
      },
    ),
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [ConstituentModel] entity fields to define ObjectBox queries.
class ConstituentModel_ {
  /// See [ConstituentModel.localId].
  static final localId = obx.QueryIntegerProperty<ConstituentModel>(
    _entities[0].properties[0],
  );

  /// See [ConstituentModel.constituentID].
  static final constituentID = obx.QueryIntegerProperty<ConstituentModel>(
    _entities[0].properties[1],
  );

  /// See [ConstituentModel.role].
  static final role = obx.QueryStringProperty<ConstituentModel>(
    _entities[0].properties[2],
  );

  /// See [ConstituentModel.name].
  static final name = obx.QueryStringProperty<ConstituentModel>(
    _entities[0].properties[3],
  );

  /// See [ConstituentModel.constituentULAN_URL].
  static final constituentULAN_URL = obx.QueryStringProperty<ConstituentModel>(
    _entities[0].properties[4],
  );

  /// See [ConstituentModel.constituentWikidata_URL].
  static final constituentWikidata_URL =
      obx.QueryStringProperty<ConstituentModel>(_entities[0].properties[5]);

  /// See [ConstituentModel.gender].
  static final gender = obx.QueryStringProperty<ConstituentModel>(
    _entities[0].properties[6],
  );
}

/// [DepartmentModel] entity fields to define ObjectBox queries.
class DepartmentModel_ {
  /// See [DepartmentModel.localId].
  static final localId = obx.QueryIntegerProperty<DepartmentModel>(
    _entities[1].properties[0],
  );

  /// See [DepartmentModel.departmentId].
  static final departmentId = obx.QueryIntegerProperty<DepartmentModel>(
    _entities[1].properties[1],
  );

  /// See [DepartmentModel.displayName].
  static final displayName = obx.QueryStringProperty<DepartmentModel>(
    _entities[1].properties[2],
  );
}

/// [MetObjectModel] entity fields to define ObjectBox queries.
class MetObjectModel_ {
  /// See [MetObjectModel.localId].
  static final localId = obx.QueryIntegerProperty<MetObjectModel>(
    _entities[2].properties[0],
  );

  /// See [MetObjectModel.objectID].
  static final objectID = obx.QueryIntegerProperty<MetObjectModel>(
    _entities[2].properties[1],
  );

  /// See [MetObjectModel.isHighlight].
  static final isHighlight = obx.QueryBooleanProperty<MetObjectModel>(
    _entities[2].properties[2],
  );

  /// See [MetObjectModel.accessionNumber].
  static final accessionNumber = obx.QueryStringProperty<MetObjectModel>(
    _entities[2].properties[3],
  );

  /// See [MetObjectModel.accessionYear].
  static final accessionYear = obx.QueryStringProperty<MetObjectModel>(
    _entities[2].properties[4],
  );

  /// See [MetObjectModel.isPublicDomain].
  static final isPublicDomain = obx.QueryBooleanProperty<MetObjectModel>(
    _entities[2].properties[5],
  );

  /// See [MetObjectModel.primaryImage].
  static final primaryImage = obx.QueryStringProperty<MetObjectModel>(
    _entities[2].properties[6],
  );

  /// See [MetObjectModel.primaryImageSmall].
  static final primaryImageSmall = obx.QueryStringProperty<MetObjectModel>(
    _entities[2].properties[7],
  );

  /// See [MetObjectModel.department].
  static final department = obx.QueryStringProperty<MetObjectModel>(
    _entities[2].properties[8],
  );

  /// See [MetObjectModel.objectName].
  static final objectName = obx.QueryStringProperty<MetObjectModel>(
    _entities[2].properties[9],
  );

  /// See [MetObjectModel.title].
  static final title = obx.QueryStringProperty<MetObjectModel>(
    _entities[2].properties[10],
  );

  /// See [MetObjectModel.culture].
  static final culture = obx.QueryStringProperty<MetObjectModel>(
    _entities[2].properties[11],
  );

  /// See [MetObjectModel.period].
  static final period = obx.QueryStringProperty<MetObjectModel>(
    _entities[2].properties[12],
  );

  /// See [MetObjectModel.dynasty].
  static final dynasty = obx.QueryStringProperty<MetObjectModel>(
    _entities[2].properties[13],
  );

  /// See [MetObjectModel.reign].
  static final reign = obx.QueryStringProperty<MetObjectModel>(
    _entities[2].properties[14],
  );

  /// See [MetObjectModel.portfolio].
  static final portfolio = obx.QueryStringProperty<MetObjectModel>(
    _entities[2].properties[15],
  );

  /// See [MetObjectModel.artistRole].
  static final artistRole = obx.QueryStringProperty<MetObjectModel>(
    _entities[2].properties[16],
  );

  /// See [MetObjectModel.artistPrefix].
  static final artistPrefix = obx.QueryStringProperty<MetObjectModel>(
    _entities[2].properties[17],
  );

  /// See [MetObjectModel.artistDisplayName].
  static final artistDisplayName = obx.QueryStringProperty<MetObjectModel>(
    _entities[2].properties[18],
  );

  /// See [MetObjectModel.artistDisplayBio].
  static final artistDisplayBio = obx.QueryStringProperty<MetObjectModel>(
    _entities[2].properties[19],
  );

  /// See [MetObjectModel.artistSuffix].
  static final artistSuffix = obx.QueryStringProperty<MetObjectModel>(
    _entities[2].properties[20],
  );

  /// See [MetObjectModel.artistAlphaSort].
  static final artistAlphaSort = obx.QueryStringProperty<MetObjectModel>(
    _entities[2].properties[21],
  );

  /// See [MetObjectModel.artistNationality].
  static final artistNationality = obx.QueryStringProperty<MetObjectModel>(
    _entities[2].properties[22],
  );

  /// See [MetObjectModel.artistBeginDate].
  static final artistBeginDate = obx.QueryStringProperty<MetObjectModel>(
    _entities[2].properties[23],
  );

  /// See [MetObjectModel.artistEndDate].
  static final artistEndDate = obx.QueryStringProperty<MetObjectModel>(
    _entities[2].properties[24],
  );

  /// See [MetObjectModel.artistGender].
  static final artistGender = obx.QueryStringProperty<MetObjectModel>(
    _entities[2].properties[25],
  );

  /// See [MetObjectModel.artistWikidata_URL].
  static final artistWikidata_URL = obx.QueryStringProperty<MetObjectModel>(
    _entities[2].properties[26],
  );

  /// See [MetObjectModel.artistULAN_URL].
  static final artistULAN_URL = obx.QueryStringProperty<MetObjectModel>(
    _entities[2].properties[27],
  );

  /// See [MetObjectModel.objectDate].
  static final objectDate = obx.QueryStringProperty<MetObjectModel>(
    _entities[2].properties[28],
  );

  /// See [MetObjectModel.objectBeginDate].
  static final objectBeginDate = obx.QueryIntegerProperty<MetObjectModel>(
    _entities[2].properties[29],
  );

  /// See [MetObjectModel.objectEndDate].
  static final objectEndDate = obx.QueryIntegerProperty<MetObjectModel>(
    _entities[2].properties[30],
  );

  /// See [MetObjectModel.medium].
  static final medium = obx.QueryStringProperty<MetObjectModel>(
    _entities[2].properties[31],
  );

  /// See [MetObjectModel.dimensions].
  static final dimensions = obx.QueryStringProperty<MetObjectModel>(
    _entities[2].properties[32],
  );

  /// See [MetObjectModel.creditLine].
  static final creditLine = obx.QueryStringProperty<MetObjectModel>(
    _entities[2].properties[33],
  );

  /// See [MetObjectModel.geographyType].
  static final geographyType = obx.QueryStringProperty<MetObjectModel>(
    _entities[2].properties[34],
  );

  /// See [MetObjectModel.city].
  static final city = obx.QueryStringProperty<MetObjectModel>(
    _entities[2].properties[35],
  );

  /// See [MetObjectModel.state].
  static final state = obx.QueryStringProperty<MetObjectModel>(
    _entities[2].properties[36],
  );

  /// See [MetObjectModel.county].
  static final county = obx.QueryStringProperty<MetObjectModel>(
    _entities[2].properties[37],
  );

  /// See [MetObjectModel.country].
  static final country = obx.QueryStringProperty<MetObjectModel>(
    _entities[2].properties[38],
  );

  /// See [MetObjectModel.region].
  static final region = obx.QueryStringProperty<MetObjectModel>(
    _entities[2].properties[39],
  );

  /// See [MetObjectModel.subregion].
  static final subregion = obx.QueryStringProperty<MetObjectModel>(
    _entities[2].properties[40],
  );

  /// See [MetObjectModel.locale].
  static final locale = obx.QueryStringProperty<MetObjectModel>(
    _entities[2].properties[41],
  );

  /// See [MetObjectModel.locus].
  static final locus = obx.QueryStringProperty<MetObjectModel>(
    _entities[2].properties[42],
  );

  /// See [MetObjectModel.excavation].
  static final excavation = obx.QueryStringProperty<MetObjectModel>(
    _entities[2].properties[43],
  );

  /// See [MetObjectModel.river].
  static final river = obx.QueryStringProperty<MetObjectModel>(
    _entities[2].properties[44],
  );

  /// See [MetObjectModel.classification].
  static final classification = obx.QueryStringProperty<MetObjectModel>(
    _entities[2].properties[45],
  );

  /// See [MetObjectModel.rightsAndReproduction].
  static final rightsAndReproduction = obx.QueryStringProperty<MetObjectModel>(
    _entities[2].properties[46],
  );

  /// See [MetObjectModel.linkResource].
  static final linkResource = obx.QueryStringProperty<MetObjectModel>(
    _entities[2].properties[47],
  );

  /// See [MetObjectModel.metadataDate].
  static final metadataDate = obx.QueryStringProperty<MetObjectModel>(
    _entities[2].properties[48],
  );

  /// See [MetObjectModel.repository].
  static final repository = obx.QueryStringProperty<MetObjectModel>(
    _entities[2].properties[49],
  );

  /// See [MetObjectModel.objectURL].
  static final objectURL = obx.QueryStringProperty<MetObjectModel>(
    _entities[2].properties[50],
  );

  /// See [MetObjectModel.objectWikidata_URL].
  static final objectWikidata_URL = obx.QueryStringProperty<MetObjectModel>(
    _entities[2].properties[51],
  );

  /// See [MetObjectModel.isTimelineWork].
  static final isTimelineWork = obx.QueryBooleanProperty<MetObjectModel>(
    _entities[2].properties[52],
  );

  /// See [MetObjectModel.GalleryNumber].
  static final GalleryNumber = obx.QueryStringProperty<MetObjectModel>(
    _entities[2].properties[53],
  );

  /// See [MetObjectModel.additionalImages].
  static final additionalImages = obx.QueryStringVectorProperty<MetObjectModel>(
    _entities[2].properties[54],
  );
}

/// [MetObjectsModel] entity fields to define ObjectBox queries.
class MetObjectsModel_ {
  /// See [MetObjectsModel.localId].
  static final localId = obx.QueryIntegerProperty<MetObjectsModel>(
    _entities[3].properties[0],
  );

  /// See [MetObjectsModel.total].
  static final total = obx.QueryIntegerProperty<MetObjectsModel>(
    _entities[3].properties[1],
  );

  /// See [MetObjectsModel.objectIDs].
  static final objectIDs = obx.QueryIntegerVectorProperty<MetObjectsModel>(
    _entities[3].properties[2],
  );
}

/// [MetSearchModel] entity fields to define ObjectBox queries.
class MetSearchModel_ {
  /// See [MetSearchModel.localId].
  static final localId = obx.QueryIntegerProperty<MetSearchModel>(
    _entities[4].properties[0],
  );

  /// See [MetSearchModel.total].
  static final total = obx.QueryIntegerProperty<MetSearchModel>(
    _entities[4].properties[1],
  );

  /// See [MetSearchModel.objectIDs].
  static final objectIDs = obx.QueryIntegerVectorProperty<MetSearchModel>(
    _entities[4].properties[2],
  );
}

/// [TagModel] entity fields to define ObjectBox queries.
class TagModel_ {
  /// See [TagModel.localId].
  static final localId = obx.QueryIntegerProperty<TagModel>(
    _entities[5].properties[0],
  );

  /// See [TagModel.term].
  static final term = obx.QueryStringProperty<TagModel>(
    _entities[5].properties[1],
  );

  /// See [TagModel.AAT_URL].
  static final AAT_URL = obx.QueryStringProperty<TagModel>(
    _entities[5].properties[2],
  );

  /// See [TagModel.Wikidata_URL].
  static final Wikidata_URL = obx.QueryStringProperty<TagModel>(
    _entities[5].properties[3],
  );
}
